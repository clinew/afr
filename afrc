#!/bin/bash

# Utility to interact with the AFR PKI as a client ("friend" or "referred").
#
# Copyright (C) 2020  Wade T. Cline
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Include library.
source afr_lib.sh

# Initialize the user's AFR client.
# 1: Name of the user to request access as.
afrc_init() {
	# Validate configuration.
	[ -f "${openssl_cnf}" ] || die "OpenSSL configuration file '${openssl_cnf}' not found"

	# Set-up.
	mkdir -p "${dir}"
	pushd "${dir}"

	# Generate user's CA.
	ca_gen "${account}"

	# Generate user's CSR.
	ca_req_gen "${account}" "$1"

	# Provide instructions for user.
	cp "${account}/csr/${account}.pem" "${dir}/csr.pem"
	echo "Now send the file '${dir}/csr.pem' to the person who will invite you"
}

# Receive the specified referrer certificate.
# 1: Path the to referrer certificate to be received.
afrc_receive_referrer() {
	# Install the certificate.
	cert=$(readlink -f "$1")
	[ -f "${cert}" ] || die "Referrer certificate '${cert}' not a file"
	pushd "${dir}"
	dest="${account}.ref/certs/${account}.ref.pem"
	[ -f "${dest}" ] && die "Referrer certificate already instaleld ('${dest}' is a file)"
	cp "${cert}" "${dest}"

	# Generate the CRL.
	ca_crl_gen "${account}.ref"
	cp "${account}.ref/crl/${account}.ref.pem" "${dir}/crl.pem"
	echo "Remember to submit the CRL file '${dir}/crl.pem' to the admin, otherwise those you invite will not be able to connect"
}

# Receive the specified client certificate.
# 1: Path to the certificate to be received.
afrc_receive_client() {
	# Receive the certificate.
	cert=$(readlink -f "$1")
	[ -f "${cert}" ] || die "Certificate '${cert}' not a file"
	pushd "${dir}"
	dest="${account}/certs/${account}.pem"
	[ -f "${dest}" ] && die "Client certificate already received ('${dest}' is a file)"
	cp "${cert}" "${dest}"
	rm -f "${dir}/csr.pem"
}

# Request a referrer certificate.
afrc_request_referrer() {
	# Parse client certificate Common Name.
	pushd "${dir}"
	cert="${account}/certs/${account}.pem"
	[ -f "${cert}" ] || die "No client certificate found ('${cert}' not a file)"
	name=$(openssl x509 -in "${cert}" -noout -subject | sed 's/subject=CN = //')

	# Generate user's CA.
	ca_gen "${account}.ref"

	# Generate user's CSR.
	ca_req_gen "${account}.ref" "${name} Referrer"

	# Provide instructions for user.
	cp "${account}.ref/csr/${account}.ref.pem" "${dir}/csr.ref.pem"
	echo "Now send the file '${dir}/csr.ref.pem' to the person who will issue your referrer certificate"
}

# Revoke the specified referred's client certificate.
# 1: Name of the referred user to revoke.
afrc_revoke_referred() {
	# Revoke the certificate.
	pushd "${dir}"
	cert="${account}.ref/certs/$1.pem"
	[ -f "${cert}" ] || die "Referred user does not exist ('${cert}' not a file)"
	ca_revoke "${account}.ref" "$1"

	# Update the CRL.
	ca_crl_gen "${account}.ref"
	cp "${account}.ref/crl/${account}.ref.pem" "${dir}/crl.pem"
	echo "Remember to resubmit '${dir}/crl.pem' to the admin in order for the revocation to take effect"
}

# Sign the specified certificate of a referred user.
# 1: Path to referred's CSR.
# 2: Name of the referred user.
afrc_sign_referred() {
	# Save CSR.
	cert=$(readlink -f "$1")
	[ -f "${cert}" ] || die "Referred CSR '${cert}' not a file"
	pushd "${dir}"
	dest="${account}.ref/csr/$2.pem"
	[ -f "${dest}" ] && die "Referred '$2' already exists ('${dest}' is a file)"
	cp "${cert}" "${dest}"

	# Sign certificate.
	ca_req_sign "${account}.ref" "$2" "v3_client"

	# Provide instructions for user.
	i=0
	while [ -f "${dir}/cert$i.pem" ]; do
		i=$(($i+1))
	done
	cp "${account}.ref/certs/$2.pem" "${dir}/cert$i.pem"
	echo "Now send the file '${dir}/cert$i.pem' to the referred user"
}

# Print a usage message and exit the program.  Exits failure if an error
# message is present.
# 1 (optional): Error message to print.
usage_print() {
	# Print error message.
	if [ $# -gt 0 ]; then
		echo "$1"
		echo ""
	fi

	# Print usage message.
	echo "$0 {init|receive-client|receive-referrer|request-referrer|revoke-referred|sign-referred}"
	echo ""
	echo -e "\tinit <NAME>: Initialize the client's AFR"
	echo -e "\t\tNAME: Certificate Common Name (CN) to request"
	echo -e "\treceive-client <CERT>: Receive a signed client certificate"
	echo -e "\t\tCERT: Path to the client certificate to receive"
	echo -e "\treceive-referrer <CERT>: Receive a referrer certificate"
	echo -e "\t\tCERT: Path to the referrer certificate to receive"
	echo -e "\trequest-referrer: Generate CSR for a referrer certificate"
	echo -e "\trevoke-referred <NAME>: Revoke a referred user's certificate"
	echo -e "\t\tNAME: Name of the referred user to revoke"
	echo -e "\tsign-referred <CSR> <NAME>: Sign certificate for a referred user"
	echo -e "\t\tCSR: The referred user's certificate signing request"
	echo -e "\t\tNAME: Name of the referred user"

	# Quit.
	if [ $# -gt 0 ]; then
		exit 1
	fi
	exit 0
}

# Parse optional arguments.
set -ex
config="~/.afrc/afrc.conf"
while getopts "c:" opt; do
	case "$opt" in
	c)
		config="${OPTARG}"
		[ -f "${config}" ] || die "Config file '${config}' not a file"
		shift
		;;
	*)
		usage_print "Unknown argument: $opt"
		;;
	esac
	shift
done

# Parse configuration file.
[ -f "${config}" ] && source "${config}"
dir=${dir:-~/.afrc}
account=${account:-${USER}}
openssl_cnf=${openssl_cnf:-/etc/afr/openssl.cnf}

# Run command.
if [ $# -eq 0 ]; then
	usage_print "Not enough arguments"
elif [ "$1" == "init" ]; then
	shift
	if [ $# -lt 1 ]; then
		usage_print "Not enough arguments"
	fi
	afrc_init $@
elif [ "$1" == "receive-client" ]; then
	shift
	if [ $# -lt 1 ]; then
		usage_print "Not enough arguments"
	fi
	afrc_receive_client $@
elif [ "$1" == "receive-referrer" ]; then
	shift
	if [ $# -lt 1 ]; then
		usage_print "Not enough arguments"
	fi
	afrc_receive_referrer $@
elif [ "$1" == "request-referrer" ]; then
	afrc_request_referrer $@
elif [ "$1" == "revoke-referred" ]; then
	shift
	if [ $# -lt 1 ]; then
		usage_print "Not enough arguments"
	fi
	afrc_revoke_referred $@
elif [ "$1" == "sign-referred" ]; then
	shift
	if [ $# -lt 2 ]; then
		usage_print "Not enough arguments"
	fi
	afrc_sign_referred $@
fi
