#!/bin/bash

# Utility to interact with the AFR PKI as an admin.
#
# Copyright (C) 2020  Wade T. Cline
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Include library.
source afr_lib.sh

# Generate the server's CA file.
afr_gen_cafile() {
	# Validate configuration.
	[ -z "${dir}" ] && die "'dir' not defined"

	# Generate CA file.
	pushd "${dir}"
	local path_root="${dir}/${dirname_root}/certs/${dirname_root}.pem"
	[ -f "${path_root}" ] || die "Root cert not found ('${path_root}' not a file)"
	local path_signing="${dir}/${dirname_signing}/certs/${dirname_signing}.pem"
	[ -f "${path_signing}" ] || die "Signing cert not found ('${path_signing}' not a file)"
	cat "${path_root}" "${path_signing}" $(find "${dir}/${dirname_signing}/certs/" -name "*.ref.pem") > "${cafile}"
	popd
}

# Generate the server's certificate file.
afr_gen_certsfile() {
	# Validate configuration.
	[ -z "${dir}" ] && die "'dir' not defined"

	# Generate certs file.
	pushd "${dir}"
	local path_root="${dir}/${dirname_root}/certs/${dirname_root}.pem"
	[ -f "${path_root}" ] || die "Root cert not found ('${path_root}' not a file)"
	local path_service="${dir}/${dirname_service}/certs/${dirname_service}.pem"
	[ -f "${path_service}" ] || die "Service cert not found ('${path_service}' not a file)"
	cat "${path_service}" "${path_root}" > "${certsfile}"
	popd
}

# Generate the server's CRL file.
afr_gen_crlfile() {
	# Validate configuration.
	[ -z "${dir}" ] && die "'dir' not defined"

	# Generate CRL file.
	pushd "${dir}"
	local path_root="${dir}/${dirname_root}/crl/${dirname_root}.pem"
	[ -f "${path_root}" ] || die "Root CRL not found ('${path_root}' not a file)"
	local path_signing="${dir}/${dirname_signing}/crl/${dirname_signing}.pem"
	[ -f "${path_signing}" ] || die "Signing CRL not found ('${path_signing}' not a file)"
	cat "${path_root}" "${path_signing}" $(find "${dir}/${dirname_signing}/crl/" -name "*.ref.pem") > "${crlfile}"
	popd
}

# Initialize an AFR infrastructure.  This includes the root, service, and
# signing certificate.
afr_init() {
	# Validate configuration.
	[ -z "${dir}" ] && die "'dir' not defined"
	[ -z "${ca}" ] && die "'ca' not defined"
	[ -z "${service}" ] && die "'service' not defined"
	[ -z "${subject_alt_name}" ] && die "'subject_alt_name' not defined"
	[ ! -f "${openssl_cnf}" ] && die "'${openssl_cnf}' not a file"

	# Create root CA.
	mkdir -p "${dir}"
	pushd "${dir}"
	ca_gen "${dirname_root}"
	ca_selfsign "${dirname_root}" "${ca} Root CA"
	ca_crl_gen "${dirname_root}"

	# Create service CA.
	ca_gen "${dirname_service}"
	ca_req_gen "${dirname_service}" "${service}"
	ca_req_submit "${dirname_root}" "${dirname_service}"
	ca_req_sign "${dirname_root}" "${dirname_service}" "v3_service" "${subject_alt_name}"
	ca_req_receive "${dirname_root}" "${dirname_service}"

	# Create signing CA.
	ca_gen "${dirname_signing}"
	ca_req_gen "${dirname_signing}" "${ca} Signing CA"
	ca_req_submit "${dirname_root}" "${dirname_signing}"
	ca_req_sign "${dirname_root}" "${dirname_signing}" "v3_signing"
	ca_req_receive "${dirname_root}" "${dirname_signing}"
	ca_crl_gen "${dirname_signing}"

	# Generate files.
	afr_gen_cafile
	afr_gen_certsfile
	afr_gen_crlfile
}

# Copies the specified CRL and stores it under the specified friend.
# 1: Path to friend's CRL file
# 2: Name of friend to store the CRL file under.
afr_receive_crl() {
	# Validate configuration.
	[ -z "${dir}" ] && die "'dir' not defined"
	[ -d "${dir}/${dirname_signing}" ] || die "Signing CA '${dirname_signing}' not found"

	# Store the CRL.
	[ -f "$1" ] || die "CRL '$1' not found"
	path="${dir}/${dirname_signing}/certs/$2.ref.pem"
	[ -f "${path}" ] || die "'$2' does not appear to be a referrer ('${path}' not found)"
	cp "$1" "${dir}/${dirname_signing}/crl/$2.ref.pem"

	# Re-generate CRL file.
	afr_gen_crlfile
}

# Revoke the specified friend's client certificate.
# 1: Name of the friend to revoke.
afr_revoke_friend() {
	# Validate configuration.
	[ -z "${dir}" ] && die "'dir' not defined"
	[ -d "${dir}/${dirname_signing}" ] || die "Signing CA '${dirname_signing}' not found"

	# Revoke the certificate.
	cert="${dir}/${dirname_signing}/certs/$1.pem"
	[ -f "${cert}" ] || die "Friend '$1' does not exist ('${cert}' not a file)"
	ca_revoke "${dirname_signing}" "$1"

	# Re-generate the CRL file.
	afr_gen_crlfile
}

# Revoke the specified friend's referrer certificate.
# 1: Name of the friend whose referrer certificate to revoke.
afr_revoke_referrer() {
	# Validate configuration.
	[ -z "${dir}" ] && die "'dir' not defined"
	[ -d "${dir}/${dirname_signing}" ] || die "Signing CA '${dirname_signing}' not found'"

	# Revoke the certificate.
	cert="${dir}/${dirname_signing}/certs/$1.ref.pem"
	[ -f "${cert}" ] || die "Friend '$1' does not appear to be a referrer ('${cert}' not a file)"
	ca_revoke "${dirname_signing}" "$1.ref"

	# Re-generate the CRL file.
	afr_gen_crlfile
}

# Sign the specified CSR as a friend's client certificate and record the CSR
# and certificate as the specified name.
# 1: Friend's CSR to sign.
# 2: Name of the friend to sign.
afr_sign_friend() {
	# Validate configuration.
	[ -z "${dir}" ] && die "'dir' not defined"
	[ -d "${dir}/${dirname_signing}" ] || die "Signing CA '${dirname_signing}' not found"

	# Place CSR with the signing CA.
	[ -f "$1" ] || die "CSR '$1' not a file"
	dest="${dir}/${dirname_signing}/csr/$2.pem"
	[ -f "${dest}" ] && die "Friend '$2' already exists ('${dest}' already a file)"
	cp "$1" "${dest}"

	# Sign the CSR.
	ca_req_sign "${dirname_signing}" "${2}" "v3_client"
}

# Sign the specified CSR for the specified friend as a referrer certificate.
# TODO: Look into validation of incoming CSR.  Pretty sure its specified
# extensions are ignored and overridden, but it'd be good to verify.
# 1: Friend's CSR to sign.
# 2: Name of the friend to sign.
afr_sign_referrer() {
	# Validate configuration.
	[ -z "${dir}" ] && die "'dir not defined"
	[ -d "${dir}/${dirname_signing}" ] || die "Signing CA '${dirname_signing}' not found"

	# Place the CSR with the signing CA.
	[ -f "$1" ] || die "CSR '$1' not a file"
	ca_path="${dir}/${dirname_signing}"
	path="${ca_path}/certs/$2.pem"
	[ -f "${path}" ] || die "Friend '$2' does not appear to exist ('${path}' not a file)"
	path="${ca_path}/csr/$2.ref.pem"
	[ -f "${path}" ] && die "Friend '$2' already a referrer ('${path}' exists)"
	cp "$1" "${path}"

	# Sign the CSR.
	ca_req_sign "${dirname_signing}" "${2}.ref" "v3_referrer"

	# Generate CAfile.
	afr_gen_cafile
}

# Print a usage message and exit the program.  Exits failure if an error
# message is present.
# 1 (optional): Error message to print.
usage_print() {
	# Print error message.
	if [ $# -gt 0 ]; then
		echo "$1"
		echo ""
	fi

	# Print usage message.
	echo "$0 [-c <path>] {init|receive-crl|revoke-friend|revoke-referrer|sign-friend|sign-referrer}"
	echo ""
	echo -e "\t-c  Path to alternate configuration file"
	echo ""
	echo -e "\tinit: Initialize an AFR root CA"
	echo -e "\treceive-crl <CRL> <NAME>: Receive a friend's CRL"
	echo -e "\t\tCRL: Path to friend's CRL"
	echo -e "\t\tNAME: Name of friend who issued the CRL"
	echo -e "\trevoke-friend <NAME>: Revoke friend's client certificate"
	echo -e "\t\tNAME: Name of friend to revoke"
	echo -e "\trevoke-referrer <NAME>: Revoke friend's referrer certificate"
	echo -e "\t\tNAME: Name of friend's referrer certificate to revoke"
	echo -e "\tsign-friend <CSR> <NAME>: Issue friend client certificate"
	echo -e "\t\tCSR: Path to friend's CSR"
	echo -e "\t\tNAME: Name of friend to sign"
	echo -e "\tsign-referrer <CSR> <NAME>: Issue friend signing certificate"
	echo -e "\t\tCSR: Path to friend's CSR"
	echo -e "\t\tNAME: Name of friend to sign"

	# Quit.
	if [ $# -gt 0 ]; then
		exit 1
	fi
	exit 0
}

# Parse optional arguments.
set -ex
config="/etc/afr/afr.conf"
while getopts "c:" opt; do
	case "$opt" in
	c)
		config="${OPTARG}"
		shift
		;;
	*)
		usage_print "Unknown argument: $opt"
		;;
	esac
	shift
done

# Parse configuration file.
[ -f "${config}" ] || die "Config file '${config}' not found"
source "${config}"
dirname_root=${dirname_root:-root}
dirname_service=${dirname_service:-service}
dirname_signing=${dirname_signing:-signing}
openssl_cnf=${openssl_cnf:-/etc/afr/openssl.cnf}
cafile=${cafile:-ca.pem}
certsfile=${certsfile:-certs.pem}
crlfile=${crlfile:-crl.pem}

# Run command.
if [ $# -eq 0 ]; then
	usage_print "Not enough arguments"
elif [ "$1" == "init" ]; then
	afr_init
elif [ "$1" == "receive-crl" ]; then
	shift
	if [ $# -lt 2 ]; then
		usage_print "Not enough arguments"
	fi
	afr_receive_crl $@
elif [ "$1" == "revoke-friend" ]; then
	shift
	if [ $# -lt 1 ]; then
		usage_print "Not enough arguments"
	fi
	afr_revoke_friend $@
elif [ "$1" == "revoke-referrer" ]; then
	shift
	if [ $# -lt 1 ]; then
		usage_print "Not enough arguments"
	fi
	afr_revoke_referrer $@
elif [ "$1" == "sign-friend" ]; then
	shift
	if [ $# -lt 2 ]; then
		usage_print "Not enough arguments"
	fi
	afr_sign_friend $@
elif [ "$1" == "sign-referrer" ]; then
	shift
	if [ $# -lt 2 ]; then
		usage_print "Not enough arguments"
	fi
	afr_sign_referrer $@
else
	usage_print "Unknown command: $1"
fi
